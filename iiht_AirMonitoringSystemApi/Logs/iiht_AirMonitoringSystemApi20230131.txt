2023-01-31 02:23:03.944 +05:30 [INF] Executed DbCommand (340ms) [Parameters=[], CommandType='"Text"', CommandTimeout='60']
CREATE DATABASE [AirDb];
2023-01-31 02:23:04.132 +05:30 [INF] Executed DbCommand (137ms) [Parameters=[], CommandType='"Text"', CommandTimeout='60']
IF SERVERPROPERTY('EngineEdition') <> 5
BEGIN
    ALTER DATABASE [AirDb] SET READ_COMMITTED_SNAPSHOT ON;
END;
2023-01-31 02:23:04.168 +05:30 [INF] Executed DbCommand (12ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2023-01-31 02:23:04.346 +05:30 [INF] Executed DbCommand (11ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [Sensors] (
    [Id] bigint NOT NULL IDENTITY,
    [date] datetime2 NOT NULL,
    [Mapped_Floor] int NOT NULL,
    [Dust_Parcticle] float NOT NULL,
    [Co2] float NOT NULL,
    [Co] float NOT NULL,
    [No2] float NOT NULL,
    [So2] float NOT NULL,
    CONSTRAINT [PK_Sensors] PRIMARY KEY ([Id])
);
2023-01-31 02:23:04.351 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
CREATE TABLE [Users] (
    [UserID] int NOT NULL IDENTITY,
    [UserName] nvarchar(max) NOT NULL,
    [Password] nvarchar(max) NOT NULL,
    [Email] nvarchar(max) NULL,
    [MobileNo] nvarchar(max) NULL,
    CONSTRAINT [PK_Users] PRIMARY KEY ([UserID])
);
2023-01-31 02:23:04.689 +05:30 [INF] User profile is available. Using 'C:\Users\cogjava4421\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-01-31 02:23:04.953 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2023-01-31 02:23:04.954 +05:30 [INF] Hosting environment: Development
2023-01-31 02:23:04.954 +05:30 [INF] Content root path: C:\Users\cogjava4421\source\repos\iiht_AirMonitoringSystemApi\iiht_AirMonitoringSystemApi\
2023-01-31 02:23:05.020 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/swagger - -
2023-01-31 02:23:05.207 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/swagger/index.html - -
2023-01-31 02:23:05.291 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/swagger - - - 301 - - 276.1181ms
2023-01-31 02:23:05.851 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/swagger/index.html - - - 200 - text/html;charset=utf-8 643.0093ms
2023-01-31 02:23:05.864 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/swagger/swagger-ui-bundle.js - -
2023-01-31 02:23:05.871 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/swagger/swagger-ui.css - -
2023-01-31 02:23:05.919 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/_framework/aspnetcore-browser-refresh.js - -
2023-01-31 02:23:05.919 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/swagger/swagger-ui-standalone-preset.js - -
2023-01-31 02:23:05.927 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/_vs/browserLink - -
2023-01-31 02:23:05.936 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/_framework/aspnetcore-browser-refresh.js - - - 200 12024 application/javascript;+charset=utf-8 8.4859ms
2023-01-31 02:23:05.969 +05:30 [INF] Sending file. Request path: '/swagger-ui-standalone-preset.js'. Physical path: 'N/A'
2023-01-31 02:23:05.969 +05:30 [INF] Sending file. Request path: '/swagger-ui.css'. Physical path: 'N/A'
2023-01-31 02:23:05.973 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/swagger/swagger-ui.css - - - 200 143632 text/css 101.7660ms
2023-01-31 02:23:05.981 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/swagger/swagger-ui-standalone-preset.js - - - 200 337162 application/javascript 62.0103ms
2023-01-31 02:23:05.984 +05:30 [INF] Sending file. Request path: '/swagger-ui-bundle.js'. Physical path: 'N/A'
2023-01-31 02:23:06.041 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/swagger/swagger-ui-bundle.js - - - 200 1092889 application/javascript 176.4080ms
2023-01-31 02:23:06.067 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 143.9851ms
2023-01-31 02:23:06.242 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/swagger/v1/swagger.json - -
2023-01-31 02:23:06.267 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/swagger/favicon-32x32.png - -
2023-01-31 02:23:06.269 +05:30 [INF] Sending file. Request path: '/favicon-32x32.png'. Physical path: 'N/A'
2023-01-31 02:23:06.269 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/swagger/favicon-32x32.png - - - 200 628 image/png 1.9145ms
2023-01-31 02:23:06.396 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 154.0669ms
2023-01-31 02:40:56.335 +05:30 [INF] Executed DbCommand (38ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2023-01-31 02:40:56.454 +05:30 [INF] Executed DbCommand (53ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']

IF EXISTS
    (SELECT *
     FROM [sys].[objects] o
     WHERE [o].[type] = 'U'
     AND [o].[is_ms_shipped] = 0
     AND NOT EXISTS (SELECT *
         FROM [sys].[extended_properties] AS [ep]
         WHERE [ep].[major_id] = [o].[object_id]
             AND [ep].[minor_id] = 0
             AND [ep].[class] = 1
             AND [ep].[name] = N'microsoft_database_tools_support'
    )
)
SELECT 1 ELSE SELECT 0
2023-01-31 02:40:56.662 +05:30 [INF] User profile is available. Using 'C:\Users\cogjava4421\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-01-31 02:40:56.834 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2023-01-31 02:40:56.835 +05:30 [INF] Hosting environment: Development
2023-01-31 02:40:56.835 +05:30 [INF] Content root path: C:\Users\cogjava4421\source\repos\iiht_AirMonitoringSystemApi\iiht_AirMonitoringSystemApi\
2023-01-31 02:40:56.865 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/swagger/index.html - -
2023-01-31 02:40:57.482 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/swagger/index.html - - - 200 - text/html;charset=utf-8 618.8117ms
2023-01-31 02:40:57.482 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/_framework/aspnetcore-browser-refresh.js - -
2023-01-31 02:40:57.501 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/_vs/browserLink - -
2023-01-31 02:40:57.527 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/_framework/aspnetcore-browser-refresh.js - - - 200 12024 application/javascript;+charset=utf-8 30.4476ms
2023-01-31 02:40:57.585 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 83.9683ms
2023-01-31 02:40:57.715 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/swagger/v1/swagger.json - -
2023-01-31 02:40:57.857 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 141.2447ms
2023-01-31 02:41:28.216 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:41:28.986 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2023-01-31 02:41:28.996 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2023-01-31 02:41:29.000 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 401 - - 784.1405ms
2023-01-31 02:43:21.081 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/JwtToken/Login application/json 53
2023-01-31 02:43:21.122 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:43:21.133 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.JwtTokenController.Login (iiht_AirMonitoringSystemApi)'
2023-01-31 02:43:21.186 +05:30 [INF] Route matched with {action = "Login", controller = "JwtToken"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(iiht_AirMonitoringSystemApi.Models.Users) on controller iiht_AirMonitoringSystemApi.Controllers.JwtTokenController (iiht_AirMonitoringSystemApi).
2023-01-31 02:43:22.194 +05:30 [INF] Executed DbCommand (159ms) [Parameters=[@__obj_UserName_0='?' (Size = 4000), @__obj_Password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [u].[UserID], [u].[Email], [u].[MobileNo], [u].[Password], [u].[UserName]
FROM [Users] AS [u]
WHERE [u].[UserName] = @__obj_UserName_0 AND [u].[Password] = @__obj_Password_1
2023-01-31 02:43:22.716 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.String'.
2023-01-31 02:43:22.727 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.JwtTokenController.Login (iiht_AirMonitoringSystemApi) in 1533.6835ms
2023-01-31 02:43:22.727 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.JwtTokenController.Login (iiht_AirMonitoringSystemApi)'
2023-01-31 02:43:22.742 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/JwtToken/Login application/json 53 - 200 - text/plain;+charset=utf-8 1661.0305ms
2023-01-31 02:44:42.010 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/JwtToken/Login - -
2023-01-31 02:44:42.016 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:44:42.020 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/JwtToken/Login - - - 204 - - 10.2015ms
2023-01-31 02:44:42.021 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/JwtToken/Login application/json 40
2023-01-31 02:44:42.021 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:44:42.022 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.JwtTokenController.Login (iiht_AirMonitoringSystemApi)'
2023-01-31 02:44:42.022 +05:30 [INF] Route matched with {action = "Login", controller = "JwtToken"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(iiht_AirMonitoringSystemApi.Models.Users) on controller iiht_AirMonitoringSystemApi.Controllers.JwtTokenController (iiht_AirMonitoringSystemApi).
2023-01-31 02:44:42.102 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__obj_UserName_0='?' (Size = 4000), @__obj_Password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [u].[UserID], [u].[Email], [u].[MobileNo], [u].[Password], [u].[UserName]
FROM [Users] AS [u]
WHERE [u].[UserName] = @__obj_UserName_0 AND [u].[Password] = @__obj_Password_1
2023-01-31 02:44:42.103 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.String'.
2023-01-31 02:44:42.104 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.JwtTokenController.Login (iiht_AirMonitoringSystemApi) in 81.9796ms
2023-01-31 02:44:42.104 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.JwtTokenController.Login (iiht_AirMonitoringSystemApi)'
2023-01-31 02:44:42.104 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/JwtToken/Login application/json 40 - 200 - text/plain;+charset=utf-8 83.2984ms
2023-01-31 02:44:47.249 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:44:47.250 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:44:47.251 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 1.8509ms
2023-01-31 02:44:47.253 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:44:47.253 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:44:47.253 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:44:47.254 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.5597ms
2023-01-31 02:44:47.254 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:44:47.292 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:44:47.292 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:44:47.292 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:44:47.297 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:44:47.350 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:44:47.411 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:44:47.413 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:44:47.413 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:44:47.510 +05:30 [INF] Executed DbCommand (7ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:44:47.512 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:44:47.528 +05:30 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2023-01-31 02:44:47.529 +05:30 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2023-01-31 02:44:47.589 +05:30 [INF] Executed DbCommand (23ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:44:47.669 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:44:47.669 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 372.6133ms
2023-01-31 02:44:47.669 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:44:47.670 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 378.0031ms
2023-01-31 02:44:47.688 +05:30 [INF] Executed DbCommand (61ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:44:47.826 +05:30 [ERR] An exception occurred while iterating over the results of a query for context type 'iiht_AirMonitoringSystemApi.Data.SensorDbContext'.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:5b1e07f4-78c0-4f52-9314-87715d73cdab
Error Number:10742,State:1,Class:15
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:5b1e07f4-78c0-4f52-9314-87715d73cdab
Error Number:10742,State:1,Class:15
2023-01-31 02:44:47.860 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 446.822ms
2023-01-31 02:44:47.863 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:44:47.875 +05:30 [ERR] An unhandled exception has occurred while executing the request.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
   at System.Text.Json.Serialization.Converters.IAsyncEnumerableOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TAsyncEnumerable value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteCore[TValue](Utf8JsonWriter writer, TValue& value, JsonTypeInfo jsonTypeInfo, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.HandleAsync(RequestDelegate next, HttpContext context, AuthorizationPolicy policy, PolicyAuthorizationResult authorizeResult)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
ClientConnectionId:5b1e07f4-78c0-4f52-9314-87715d73cdab
Error Number:10742,State:1,Class:15
2023-01-31 02:44:47.902 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 500 - text/plain;+charset=utf-8 648.8867ms
2023-01-31 02:44:52.245 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:44:52.245 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:44:52.246 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3855ms
2023-01-31 02:44:52.247 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:44:52.247 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:44:52.249 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:44:52.249 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:44:52.249 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:44:52.249 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:44:52.249 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3772ms
2023-01-31 02:44:52.250 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:44:52.251 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:44:52.251 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:44:52.252 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:44:52.252 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:44:52.252 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:44:52.252 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:44:52.252 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:44:52.256 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:44:52.257 +05:30 [ERR] An exception occurred while iterating over the results of a query for context type 'iiht_AirMonitoringSystemApi.Data.SensorDbContext'.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:5b1e07f4-78c0-4f52-9314-87715d73cdab
Error Number:10742,State:1,Class:15
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:5b1e07f4-78c0-4f52-9314-87715d73cdab
Error Number:10742,State:1,Class:15
2023-01-31 02:44:52.260 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 10.5456ms
2023-01-31 02:44:52.261 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:44:52.261 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:44:52.261 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:44:52.261 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 9.7759ms
2023-01-31 02:44:52.261 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:44:52.262 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 10.6726ms
2023-01-31 02:44:52.262 +05:30 [ERR] An unhandled exception has occurred while executing the request.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
   at System.Text.Json.Serialization.Converters.IAsyncEnumerableOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TAsyncEnumerable value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteCore[TValue](Utf8JsonWriter writer, TValue& value, JsonTypeInfo jsonTypeInfo, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.HandleAsync(RequestDelegate next, HttpContext context, AuthorizationPolicy policy, PolicyAuthorizationResult authorizeResult)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
ClientConnectionId:5b1e07f4-78c0-4f52-9314-87715d73cdab
Error Number:10742,State:1,Class:15
2023-01-31 02:44:52.268 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 500 - text/plain;+charset=utf-8 20.9624ms
2023-01-31 02:44:57.239 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:44:57.239 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:44:57.240 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3499ms
2023-01-31 02:44:57.241 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:44:57.241 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:44:57.242 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:44:57.242 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:44:57.242 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:44:57.244 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:44:57.244 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:44:57.248 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:44:57.249 +05:30 [ERR] An exception occurred while iterating over the results of a query for context type 'iiht_AirMonitoringSystemApi.Data.SensorDbContext'.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:993718b8-9da4-456d-aaa8-52a5c11f0a25
Error Number:10742,State:1,Class:15
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:993718b8-9da4-456d-aaa8-52a5c11f0a25
Error Number:10742,State:1,Class:15
2023-01-31 02:44:57.252 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 9.6947ms
2023-01-31 02:44:57.252 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:44:57.253 +05:30 [ERR] An unhandled exception has occurred while executing the request.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
   at System.Text.Json.Serialization.Converters.IAsyncEnumerableOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TAsyncEnumerable value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteCore[TValue](Utf8JsonWriter writer, TValue& value, JsonTypeInfo jsonTypeInfo, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.HandleAsync(RequestDelegate next, HttpContext context, AuthorizationPolicy policy, PolicyAuthorizationResult authorizeResult)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
ClientConnectionId:993718b8-9da4-456d-aaa8-52a5c11f0a25
Error Number:10742,State:1,Class:15
2023-01-31 02:44:57.258 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:44:57.258 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:44:57.258 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.2740ms
2023-01-31 02:44:57.261 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:44:57.261 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 500 - text/plain;+charset=utf-8 19.6905ms
2023-01-31 02:44:57.261 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:44:57.261 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:44:57.261 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:44:57.261 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:44:57.266 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:44:57.267 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:44:57.267 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 5.4756ms
2023-01-31 02:44:57.267 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:44:57.267 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 6.3696ms
2023-01-31 02:45:03.051 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:03.051 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:03.052 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.5060ms
2023-01-31 02:45:03.054 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:03.054 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:03.054 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:45:03.054 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.2260ms
2023-01-31 02:45:03.054 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:03.054 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:03.054 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:03.054 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:45:03.056 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:45:03.056 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:03.056 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:03.056 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:03.056 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:45:03.059 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:45:03.059 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:45:03.062 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:45:03.063 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:45:03.063 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 6.7886ms
2023-01-31 02:45:03.063 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:03.063 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 7.5398ms
2023-01-31 02:45:03.066 +05:30 [INF] Executed DbCommand (7ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:45:03.075 +05:30 [ERR] An exception occurred while iterating over the results of a query for context type 'iiht_AirMonitoringSystemApi.Data.SensorDbContext'.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:993718b8-9da4-456d-aaa8-52a5c11f0a25
Error Number:10742,State:1,Class:15
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:993718b8-9da4-456d-aaa8-52a5c11f0a25
Error Number:10742,State:1,Class:15
2023-01-31 02:45:03.078 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 23.5022ms
2023-01-31 02:45:03.078 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:03.079 +05:30 [ERR] An unhandled exception has occurred while executing the request.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
   at System.Text.Json.Serialization.Converters.IAsyncEnumerableOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TAsyncEnumerable value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteCore[TValue](Utf8JsonWriter writer, TValue& value, JsonTypeInfo jsonTypeInfo, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.HandleAsync(RequestDelegate next, HttpContext context, AuthorizationPolicy policy, PolicyAuthorizationResult authorizeResult)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
ClientConnectionId:993718b8-9da4-456d-aaa8-52a5c11f0a25
Error Number:10742,State:1,Class:15
2023-01-31 02:45:03.084 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 500 - text/plain;+charset=utf-8 30.1764ms
2023-01-31 02:45:08.037 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:08.037 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:08.037 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3166ms
2023-01-31 02:45:08.039 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:45:08.039 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:08.039 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:08.039 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:08.040 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:45:08.041 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:45:08.041 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:45:08.045 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:45:08.046 +05:30 [ERR] An exception occurred while iterating over the results of a query for context type 'iiht_AirMonitoringSystemApi.Data.SensorDbContext'.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:993718b8-9da4-456d-aaa8-52a5c11f0a25
Error Number:10742,State:1,Class:15
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:993718b8-9da4-456d-aaa8-52a5c11f0a25
Error Number:10742,State:1,Class:15
2023-01-31 02:45:08.050 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 10.3002ms
2023-01-31 02:45:08.050 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:08.052 +05:30 [ERR] An unhandled exception has occurred while executing the request.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
   at System.Text.Json.Serialization.Converters.IAsyncEnumerableOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TAsyncEnumerable value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteCore[TValue](Utf8JsonWriter writer, TValue& value, JsonTypeInfo jsonTypeInfo, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.HandleAsync(RequestDelegate next, HttpContext context, AuthorizationPolicy policy, PolicyAuthorizationResult authorizeResult)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
ClientConnectionId:993718b8-9da4-456d-aaa8-52a5c11f0a25
Error Number:10742,State:1,Class:15
2023-01-31 02:45:08.057 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 500 - text/plain;+charset=utf-8 18.0195ms
2023-01-31 02:45:09.037 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:09.037 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:09.038 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3845ms
2023-01-31 02:45:09.039 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:45:09.039 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:09.039 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:09.039 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:09.040 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:45:09.043 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:45:09.043 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:45:09.043 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 4.1313ms
2023-01-31 02:45:09.043 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:09.044 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 5.0457ms
2023-01-31 02:45:13.045 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:13.045 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:13.046 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.4147ms
2023-01-31 02:45:13.047 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:45:13.047 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:13.047 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:13.047 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:13.048 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:45:13.050 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:45:13.050 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:45:13.054 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:45:13.055 +05:30 [ERR] An exception occurred while iterating over the results of a query for context type 'iiht_AirMonitoringSystemApi.Data.SensorDbContext'.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:993718b8-9da4-456d-aaa8-52a5c11f0a25
Error Number:10742,State:1,Class:15
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:993718b8-9da4-456d-aaa8-52a5c11f0a25
Error Number:10742,State:1,Class:15
2023-01-31 02:45:13.057 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 9.5941ms
2023-01-31 02:45:13.057 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:13.059 +05:30 [ERR] An unhandled exception has occurred while executing the request.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
   at System.Text.Json.Serialization.Converters.IAsyncEnumerableOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TAsyncEnumerable value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteCore[TValue](Utf8JsonWriter writer, TValue& value, JsonTypeInfo jsonTypeInfo, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.HandleAsync(RequestDelegate next, HttpContext context, AuthorizationPolicy policy, PolicyAuthorizationResult authorizeResult)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
ClientConnectionId:993718b8-9da4-456d-aaa8-52a5c11f0a25
Error Number:10742,State:1,Class:15
2023-01-31 02:45:13.063 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 500 - text/plain;+charset=utf-8 16.4938ms
2023-01-31 02:45:14.061 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:14.061 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:14.061 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3408ms
2023-01-31 02:45:14.065 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:45:14.065 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:14.065 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:14.065 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:14.066 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:45:14.070 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:45:14.070 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:45:14.070 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 4.7113ms
2023-01-31 02:45:14.070 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:14.071 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 5.4819ms
2023-01-31 02:45:17.226 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:17.226 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:17.226 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3251ms
2023-01-31 02:45:17.228 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:45:17.228 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:17.228 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:17.228 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:17.228 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:45:17.230 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:45:17.230 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:45:17.233 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:45:17.234 +05:30 [ERR] An exception occurred while iterating over the results of a query for context type 'iiht_AirMonitoringSystemApi.Data.SensorDbContext'.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:993718b8-9da4-456d-aaa8-52a5c11f0a25
Error Number:10742,State:1,Class:15
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:993718b8-9da4-456d-aaa8-52a5c11f0a25
Error Number:10742,State:1,Class:15
2023-01-31 02:45:17.237 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 8.8414ms
2023-01-31 02:45:17.265 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:17.267 +05:30 [ERR] An unhandled exception has occurred while executing the request.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
   at System.Text.Json.Serialization.Converters.IAsyncEnumerableOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TAsyncEnumerable value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteCore[TValue](Utf8JsonWriter writer, TValue& value, JsonTypeInfo jsonTypeInfo, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.HandleAsync(RequestDelegate next, HttpContext context, AuthorizationPolicy policy, PolicyAuthorizationResult authorizeResult)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
ClientConnectionId:993718b8-9da4-456d-aaa8-52a5c11f0a25
Error Number:10742,State:1,Class:15
2023-01-31 02:45:17.272 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 500 - text/plain;+charset=utf-8 44.4685ms
2023-01-31 02:45:18.954 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/JwtToken/Login - -
2023-01-31 02:45:18.954 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:18.954 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/JwtToken/Login - - - 204 - - 0.4353ms
2023-01-31 02:45:18.956 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/JwtToken/Login application/json 40
2023-01-31 02:45:18.956 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:18.956 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.JwtTokenController.Login (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:18.956 +05:30 [INF] Route matched with {action = "Login", controller = "JwtToken"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(iiht_AirMonitoringSystemApi.Models.Users) on controller iiht_AirMonitoringSystemApi.Controllers.JwtTokenController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:18.959 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[@__obj_UserName_0='?' (Size = 4000), @__obj_Password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [u].[UserID], [u].[Email], [u].[MobileNo], [u].[Password], [u].[UserName]
FROM [Users] AS [u]
WHERE [u].[UserName] = @__obj_UserName_0 AND [u].[Password] = @__obj_Password_1
2023-01-31 02:45:18.960 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.String'.
2023-01-31 02:45:18.960 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.JwtTokenController.Login (iiht_AirMonitoringSystemApi) in 4.2146ms
2023-01-31 02:45:18.960 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.JwtTokenController.Login (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:18.960 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/JwtToken/Login application/json 40 - 200 - text/plain;+charset=utf-8 4.6986ms
2023-01-31 02:45:24.010 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:24.010 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:24.012 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 2.2277ms
2023-01-31 02:45:24.012 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:24.012 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:24.012 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.1745ms
2023-01-31 02:45:24.016 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:45:24.017 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:24.017 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:24.017 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:24.017 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:45:24.018 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:45:24.018 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:24.018 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:24.018 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:24.019 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:45:24.028 +05:30 [INF] Executed DbCommand (9ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:45:24.028 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:45:24.044 +05:30 [INF] Executed DbCommand (26ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:45:24.044 +05:30 [INF] Executed DbCommand (15ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:45:24.044 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:45:24.044 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 27.6782ms
2023-01-31 02:45:24.044 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:24.045 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 28.6824ms
2023-01-31 02:45:24.045 +05:30 [ERR] An exception occurred while iterating over the results of a query for context type 'iiht_AirMonitoringSystemApi.Data.SensorDbContext'.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:5b1e07f4-78c0-4f52-9314-87715d73cdab
Error Number:10742,State:1,Class:15
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:5b1e07f4-78c0-4f52-9314-87715d73cdab
Error Number:10742,State:1,Class:15
2023-01-31 02:45:24.049 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 30.2937ms
2023-01-31 02:45:24.049 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:24.051 +05:30 [ERR] An unhandled exception has occurred while executing the request.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
   at System.Text.Json.Serialization.Converters.IAsyncEnumerableOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TAsyncEnumerable value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteCore[TValue](Utf8JsonWriter writer, TValue& value, JsonTypeInfo jsonTypeInfo, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.HandleAsync(RequestDelegate next, HttpContext context, AuthorizationPolicy policy, PolicyAuthorizationResult authorizeResult)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
ClientConnectionId:5b1e07f4-78c0-4f52-9314-87715d73cdab
Error Number:10742,State:1,Class:15
2023-01-31 02:45:24.056 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 500 - text/plain;+charset=utf-8 37.4924ms
2023-01-31 02:45:29.053 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:29.054 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:29.054 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3595ms
2023-01-31 02:45:29.054 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:29.054 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:29.054 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.2657ms
2023-01-31 02:45:29.056 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:45:29.056 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:29.057 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:29.057 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:29.057 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:45:29.058 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:45:29.058 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:29.058 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:29.058 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:29.058 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:45:29.062 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:45:29.062 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:45:29.068 +05:30 [INF] Executed DbCommand (9ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:45:29.068 +05:30 [INF] Executed DbCommand (6ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:45:29.068 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:45:29.068 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 10.0615ms
2023-01-31 02:45:29.068 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:29.069 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 10.9636ms
2023-01-31 02:45:29.069 +05:30 [ERR] An exception occurred while iterating over the results of a query for context type 'iiht_AirMonitoringSystemApi.Data.SensorDbContext'.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:5b1e07f4-78c0-4f52-9314-87715d73cdab
Error Number:10742,State:1,Class:15
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:5b1e07f4-78c0-4f52-9314-87715d73cdab
Error Number:10742,State:1,Class:15
2023-01-31 02:45:29.076 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 19.7629ms
2023-01-31 02:45:29.077 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:29.080 +05:30 [ERR] An unhandled exception has occurred while executing the request.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
   at System.Text.Json.Serialization.Converters.IAsyncEnumerableOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TAsyncEnumerable value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteCore[TValue](Utf8JsonWriter writer, TValue& value, JsonTypeInfo jsonTypeInfo, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.HandleAsync(RequestDelegate next, HttpContext context, AuthorizationPolicy policy, PolicyAuthorizationResult authorizeResult)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
ClientConnectionId:5b1e07f4-78c0-4f52-9314-87715d73cdab
Error Number:10742,State:1,Class:15
2023-01-31 02:45:29.093 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 500 - text/plain;+charset=utf-8 36.6484ms
2023-01-31 02:45:34.044 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:34.044 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:34.044 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.4116ms
2023-01-31 02:45:34.046 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:45:34.046 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:34.046 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:34.046 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:34.046 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:45:34.048 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:45:34.048 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:45:34.052 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:45:34.053 +05:30 [ERR] An exception occurred while iterating over the results of a query for context type 'iiht_AirMonitoringSystemApi.Data.SensorDbContext'.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:5b1e07f4-78c0-4f52-9314-87715d73cdab
Error Number:10742,State:1,Class:15
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:5b1e07f4-78c0-4f52-9314-87715d73cdab
Error Number:10742,State:1,Class:15
2023-01-31 02:45:34.055 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 8.8441ms
2023-01-31 02:45:34.056 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:34.057 +05:30 [ERR] An unhandled exception has occurred while executing the request.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
   at System.Text.Json.Serialization.Converters.IAsyncEnumerableOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TAsyncEnumerable value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteCore[TValue](Utf8JsonWriter writer, TValue& value, JsonTypeInfo jsonTypeInfo, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.HandleAsync(RequestDelegate next, HttpContext context, AuthorizationPolicy policy, PolicyAuthorizationResult authorizeResult)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
ClientConnectionId:5b1e07f4-78c0-4f52-9314-87715d73cdab
Error Number:10742,State:1,Class:15
2023-01-31 02:45:34.062 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 500 - text/plain;+charset=utf-8 15.7877ms
2023-01-31 02:45:35.042 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:35.042 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:35.042 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3551ms
2023-01-31 02:45:35.044 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:45:35.044 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:35.044 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:35.044 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:35.045 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:45:35.050 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:45:35.050 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:45:35.050 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 5.7335ms
2023-01-31 02:45:35.050 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:35.050 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 6.7189ms
2023-01-31 02:45:39.056 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:39.056 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:39.056 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3593ms
2023-01-31 02:45:39.066 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:45:39.066 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:39.067 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:39.067 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:39.067 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:45:39.071 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:45:39.072 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:45:39.084 +05:30 [INF] Executed DbCommand (12ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:45:39.100 +05:30 [ERR] An exception occurred while iterating over the results of a query for context type 'iiht_AirMonitoringSystemApi.Data.SensorDbContext'.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:5b1e07f4-78c0-4f52-9314-87715d73cdab
Error Number:10742,State:1,Class:15
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
ClientConnectionId:5b1e07f4-78c0-4f52-9314-87715d73cdab
Error Number:10742,State:1,Class:15
2023-01-31 02:45:39.105 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 38.2428ms
2023-01-31 02:45:39.106 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:39.109 +05:30 [ERR] An unhandled exception has occurred while executing the request.
Microsoft.Data.SqlClient.SqlException (0x80131904): The offset specified in a OFFSET clause may not be negative.
   at Microsoft.Data.SqlClient.SqlConnection.OnError(SqlException exception, Boolean breakConnection, Action`1 wrapCloseInAction)
   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, Boolean callerHasConnectionLock, Boolean asyncClose)
   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)
   at Microsoft.Data.SqlClient.SqlDataReader.TryHasMoreRows(Boolean& moreRows)
   at Microsoft.Data.SqlClient.SqlDataReader.TryReadInternal(Boolean setTimeout, Boolean& more)
   at Microsoft.Data.SqlClient.SqlDataReader.ReadAsyncExecute(Task task, Object state)
   at Microsoft.Data.SqlClient.SqlDataReader.InvokeAsyncCall[T](SqlDataReaderAsyncCallContext`1 context)
--- End of stack trace from previous location ---
   at Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.AsyncEnumerator.MoveNextAsync()
   at System.Text.Json.Serialization.Converters.IAsyncEnumerableOfTConverter`2.OnWriteResume(Utf8JsonWriter writer, TAsyncEnumerable value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonCollectionConverter`2.OnTryWrite(Utf8JsonWriter writer, TCollection value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.TryWrite(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCore(Utf8JsonWriter writer, T& value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.Serialization.JsonConverter`1.WriteCoreAsObject(Utf8JsonWriter writer, Object value, JsonSerializerOptions options, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteCore[TValue](Utf8JsonWriter writer, TValue& value, JsonTypeInfo jsonTypeInfo, WriteStack& state)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at System.Text.Json.JsonSerializer.WriteStreamAsync[TValue](Stream utf8Json, TValue value, JsonTypeInfo jsonTypeInfo, CancellationToken cancellationToken)
   at Microsoft.AspNetCore.Mvc.Formatters.SystemTextJsonOutputFormatter.WriteResponseBodyAsync(OutputFormatterWriteContext context, Encoding selectedEncoding)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResultFilterAsync>g__Awaited|30_0[TFilter,TFilterAsync](ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResultExecutedContextSealed context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.ResultNext[TFilter,TFilterAsync](State& next, Scope& scope, Object& state, Boolean& isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeResultFilters>g__Awaited|28_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeFilterPipelineAsync>g__Awaited|20_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Logged|17_1(ResourceInvoker invoker)
   at Microsoft.AspNetCore.Routing.EndpointMiddleware.<Invoke>g__AwaitRequestTask|6_0(Endpoint endpoint, Task requestTask, ILogger logger)
   at Microsoft.AspNetCore.Authorization.Policy.AuthorizationMiddlewareResultHandler.HandleAsync(RequestDelegate next, HttpContext context, AuthorizationPolicy policy, PolicyAuthorizationResult authorizeResult)
   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)
   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)
   at Microsoft.AspNetCore.Diagnostics.DeveloperExceptionPageMiddleware.Invoke(HttpContext context)
ClientConnectionId:5b1e07f4-78c0-4f52-9314-87715d73cdab
Error Number:10742,State:1,Class:15
2023-01-31 02:45:39.115 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 500 - text/plain;+charset=utf-8 48.3538ms
2023-01-31 02:45:41.041 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:41.041 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:41.042 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3806ms
2023-01-31 02:45:41.044 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:45:41.044 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:41.044 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:41.044 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:41.044 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:45:41.049 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:45:41.049 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:45:41.049 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 4.9093ms
2023-01-31 02:45:41.049 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:41.049 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 5.6983ms
2023-01-31 02:45:44.047 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:44.048 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:44.048 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.4877ms
2023-01-31 02:45:44.049 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:45:44.049 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:44.050 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:44.050 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:44.050 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:45:44.051 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:45:44.052 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:45:44.055 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:45:44.078 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 28.4336ms
2023-01-31 02:45:44.078 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:44.078 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 29.1694ms
2023-01-31 02:45:49.073 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:49.073 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:49.073 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.4098ms
2023-01-31 02:45:49.075 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:45:49.075 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:49.076 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:49.076 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:49.076 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:45:49.078 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:45:49.078 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:45:49.082 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:45:49.083 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 7.5908ms
2023-01-31 02:45:49.083 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:49.084 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 8.4372ms
2023-01-31 02:45:53.969 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:45:53.969 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:53.970 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:53.970 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:53.970 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:45:53.972 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:45:53.973 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:45:53.976 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:45:53.977 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 6.8378ms
2023-01-31 02:45:53.977 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:53.977 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 7.6656ms
2023-01-31 02:45:58.989 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:58.989 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:58.989 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3275ms
2023-01-31 02:45:58.991 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:45:58.992 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:58.992 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:58.992 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:45:58.992 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:58.992 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:58.992 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:45:58.992 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3077ms
2023-01-31 02:45:58.994 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:45:58.994 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:45:58.997 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:45:58.997 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:45:58.997 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:58.997 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:45:58.998 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:45:58.998 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:45:58.998 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 6.2456ms
2023-01-31 02:45:58.998 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:58.999 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 7.3230ms
2023-01-31 02:45:59.002 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:45:59.002 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:45:59.002 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 4.4025ms
2023-01-31 02:45:59.002 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:45:59.003 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 6.1068ms
2023-01-31 02:46:03.991 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:46:03.991 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:03.991 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3434ms
2023-01-31 02:46:03.993 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:46:03.993 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:03.993 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:03.993 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:03.993 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:46:03.995 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:46:03.995 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:46:04.000 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:46:04.001 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 7.4163ms
2023-01-31 02:46:04.001 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:04.001 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 8.1966ms
2023-01-31 02:46:08.265 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:46:08.265 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:08.265 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3199ms
2023-01-31 02:46:08.266 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:46:08.266 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:08.266 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:08.267 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:08.267 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:46:08.271 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:46:08.272 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:46:08.272 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 4.9779ms
2023-01-31 02:46:08.272 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:08.272 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 5.9845ms
2023-01-31 02:46:08.969 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:46:08.969 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:08.969 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3645ms
2023-01-31 02:46:08.971 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:46:08.971 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:08.971 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:08.971 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:08.972 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:46:08.974 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:46:08.974 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:46:08.978 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:46:08.979 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 7.6631ms
2023-01-31 02:46:08.979 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:08.979 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 8.5405ms
2023-01-31 02:46:10.231 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:46:10.231 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:10.231 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3711ms
2023-01-31 02:46:10.234 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:46:10.235 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:10.235 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:10.235 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:10.235 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:46:10.241 +05:30 [INF] Executed DbCommand (5ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:46:10.242 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:46:10.242 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 6.9062ms
2023-01-31 02:46:10.242 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:10.242 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 7.8079ms
2023-01-31 02:46:11.705 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:46:11.705 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:11.706 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:11.706 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:11.706 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:46:11.711 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:46:11.711 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:46:11.711 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 5.5942ms
2023-01-31 02:46:11.711 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:11.712 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 6.5821ms
2023-01-31 02:46:12.628 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:46:12.628 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:12.628 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:12.628 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:12.628 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:46:12.632 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:46:12.633 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:46:12.633 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 4.5706ms
2023-01-31 02:46:12.633 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:12.633 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 5.6822ms
2023-01-31 02:46:13.971 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:46:13.971 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:13.971 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3930ms
2023-01-31 02:46:13.973 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:46:13.973 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:13.973 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:13.973 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:13.973 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:46:13.975 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:46:13.975 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:46:13.979 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:46:13.980 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 6.7813ms
2023-01-31 02:46:13.980 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:13.980 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 7.4625ms
2023-01-31 02:46:17.448 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/JwtToken/Login - -
2023-01-31 02:46:17.449 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:17.449 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/JwtToken/Login - - - 204 - - 0.3603ms
2023-01-31 02:46:17.450 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/JwtToken/Login application/json 40
2023-01-31 02:46:17.450 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:17.450 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.JwtTokenController.Login (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:17.451 +05:30 [INF] Route matched with {action = "Login", controller = "JwtToken"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Login(iiht_AirMonitoringSystemApi.Models.Users) on controller iiht_AirMonitoringSystemApi.Controllers.JwtTokenController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:17.454 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[@__obj_UserName_0='?' (Size = 4000), @__obj_Password_1='?' (Size = 4000)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [u].[UserID], [u].[Email], [u].[MobileNo], [u].[Password], [u].[UserName]
FROM [Users] AS [u]
WHERE [u].[UserName] = @__obj_UserName_0 AND [u].[Password] = @__obj_Password_1
2023-01-31 02:46:17.454 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.String'.
2023-01-31 02:46:17.455 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.JwtTokenController.Login (iiht_AirMonitoringSystemApi) in 4.2464ms
2023-01-31 02:46:17.455 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.JwtTokenController.Login (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:17.455 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/JwtToken/Login application/json 40 - 200 - text/plain;+charset=utf-8 4.7057ms
2023-01-31 02:46:22.493 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:46:22.493 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:22.493 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.5313ms
2023-01-31 02:46:22.496 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:46:22.496 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:22.496 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:46:22.496 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:22.496 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.2698ms
2023-01-31 02:46:22.496 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:22.497 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:22.497 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:46:22.498 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:46:22.498 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:22.498 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:22.499 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:22.499 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:46:22.499 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:46:22.500 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:46:22.503 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:46:22.504 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 7.4654ms
2023-01-31 02:46:22.504 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:22.504 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 8.7107ms
2023-01-31 02:46:22.507 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:46:22.507 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:46:22.507 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 8.0547ms
2023-01-31 02:46:22.507 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:22.507 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 8.9040ms
2023-01-31 02:46:27.496 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:46:27.497 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:27.497 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3459ms
2023-01-31 02:46:27.498 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:46:27.498 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:27.499 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:27.499 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:27.499 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:46:27.503 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:46:27.503 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:46:27.508 +05:30 [INF] Executed DbCommand (5ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:46:27.509 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 9.5334ms
2023-01-31 02:46:27.509 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:27.509 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 10.6816ms
2023-01-31 02:46:27.531 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:46:27.531 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:27.532 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.6687ms
2023-01-31 02:46:27.533 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:46:27.534 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:27.534 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:27.534 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:27.534 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:46:27.539 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:46:27.539 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:46:27.539 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 5.0286ms
2023-01-31 02:46:27.539 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:27.539 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 6.0175ms
2023-01-31 02:46:33.048 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:46:33.048 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:33.048 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3378ms
2023-01-31 02:46:33.050 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:46:33.050 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:33.050 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:33.050 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:46:33.050 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:33.051 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:33.051 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:46:33.051 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.2448ms
2023-01-31 02:46:33.052 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:46:33.052 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:33.052 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:33.052 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:33.052 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:46:33.052 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:46:33.053 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:46:33.056 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:46:33.056 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:46:33.056 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 4.2467ms
2023-01-31 02:46:33.056 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:33.057 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 4.9631ms
2023-01-31 02:46:33.057 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:46:33.063 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 12.7832ms
2023-01-31 02:46:33.063 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:33.064 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 13.6979ms
2023-01-31 02:46:38.070 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:46:38.070 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:38.070 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3468ms
2023-01-31 02:46:38.075 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:46:38.076 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:38.076 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:38.076 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:38.076 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:46:38.085 +05:30 [INF] Executed DbCommand (8ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:46:38.085 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:46:38.088 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:46:38.089 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 13.2396ms
2023-01-31 02:46:38.089 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:38.089 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 13.9526ms
2023-01-31 02:46:43.038 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:46:43.038 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:43.039 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:43.039 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:43.039 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:46:43.041 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:46:43.041 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:46:43.043 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:46:43.044 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 5.257ms
2023-01-31 02:46:43.044 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:43.044 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 6.0688ms
2023-01-31 02:46:48.057 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:46:48.057 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:48.058 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3486ms
2023-01-31 02:46:48.059 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:46:48.059 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:48.060 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:48.060 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:48.060 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:46:48.062 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:46:48.062 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:46:48.066 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:46:48.067 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 7.2899ms
2023-01-31 02:46:48.067 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:48.067 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 8.0974ms
2023-01-31 02:46:58.059 +05:30 [INF] Executed DbCommand (21ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT 1
2023-01-31 02:46:58.196 +05:30 [INF] Executed DbCommand (93ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']

IF EXISTS
    (SELECT *
     FROM [sys].[objects] o
     WHERE [o].[type] = 'U'
     AND [o].[is_ms_shipped] = 0
     AND NOT EXISTS (SELECT *
         FROM [sys].[extended_properties] AS [ep]
         WHERE [ep].[major_id] = [o].[object_id]
             AND [ep].[minor_id] = 0
             AND [ep].[class] = 1
             AND [ep].[name] = N'microsoft_database_tools_support'
    )
)
SELECT 1 ELSE SELECT 0
2023-01-31 02:46:58.348 +05:30 [INF] User profile is available. Using 'C:\Users\cogjava4421\AppData\Local\ASP.NET\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.
2023-01-31 02:46:58.519 +05:30 [INF] Application started. Press Ctrl+C to shut down.
2023-01-31 02:46:58.519 +05:30 [INF] Hosting environment: Development
2023-01-31 02:46:58.519 +05:30 [INF] Content root path: C:\Users\cogjava4421\source\repos\iiht_AirMonitoringSystemApi\iiht_AirMonitoringSystemApi\
2023-01-31 02:46:58.571 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/swagger/index.html - -
2023-01-31 02:46:58.571 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:46:58.571 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:46:58.571 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:46:58.633 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:58.634 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:58.648 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:58.664 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 107
2023-01-31 02:46:58.674 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:58.682 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 109.6109ms
2023-01-31 02:46:58.682 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 109.5998ms
2023-01-31 02:46:58.802 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:58.857 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:58.950 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:46:59.125 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:59.126 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:59.141 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:46:59.211 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/swagger/index.html - - - 200 - text/html;charset=utf-8 644.7973ms
2023-01-31 02:46:59.240 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/_framework/aspnetcore-browser-refresh.js - -
2023-01-31 02:46:59.245 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/_vs/browserLink - -
2023-01-31 02:46:59.245 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/_framework/aspnetcore-browser-refresh.js - - - 200 12024 application/javascript;+charset=utf-8 5.1349ms
2023-01-31 02:46:59.342 +05:30 [INF] Executed DbCommand (58ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:46:59.370 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/_vs/browserLink - - - 200 - text/javascript;+charset=UTF-8 125.4509ms
2023-01-31 02:46:59.381 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:46:59.387 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 523.9292ms
2023-01-31 02:46:59.388 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:59.393 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 107 - 201 - - 729.7790ms
2023-01-31 02:46:59.434 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/swagger/v1/swagger.json - -
2023-01-31 02:46:59.542 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/swagger/v1/swagger.json - - - 200 - application/json;charset=utf-8 107.5707ms
2023-01-31 02:46:59.701 +05:30 [INF] Executed DbCommand (65ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:46:59.712 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:46:59.746 +05:30 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2023-01-31 02:46:59.747 +05:30 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2023-01-31 02:46:59.805 +05:30 [INF] Executed DbCommand (18ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:46:59.832 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:46:59.833 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:46:59.835 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 708.0206ms
2023-01-31 02:46:59.835 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:59.835 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:59.835 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:46:59.836 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:46:59.836 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 1269.5552ms
2023-01-31 02:46:59.839 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:46:59.839 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:46:59.844 +05:30 [INF] Executed DbCommand (4ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:46:59.845 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 9.1178ms
2023-01-31 02:46:59.845 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:46:59.845 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 12.6902ms
2023-01-31 02:47:03.043 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:47:03.044 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:03.044 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.7202ms
2023-01-31 02:47:03.045 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:47:03.046 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:03.047 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:03.047 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:47:03.048 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:47:03.049 +05:30 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:47:03.049 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:47:03.052 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:47:03.054 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 6.8569ms
2023-01-31 02:47:03.054 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:03.055 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 9.1809ms
2023-01-31 02:47:04.882 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:47:04.883 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2023-01-31 02:47:04.887 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2023-01-31 02:47:04.888 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 401 - - 6.0087ms
2023-01-31 02:47:06.147 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:47:06.147 +05:30 [INF] Authorization failed. These requirements were not met:
DenyAnonymousAuthorizationRequirement: Requires an authenticated user.
2023-01-31 02:47:06.147 +05:30 [INF] AuthenticationScheme: Bearer was challenged.
2023-01-31 02:47:06.148 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 401 - - 1.2190ms
2023-01-31 02:47:08.043 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:47:08.044 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:08.046 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:08.046 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:47:08.047 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:47:08.051 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:47:08.051 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:47:08.056 +05:30 [INF] Executed DbCommand (5ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:47:08.058 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 11.5378ms
2023-01-31 02:47:08.058 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:08.058 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 14.7100ms
2023-01-31 02:47:13.045 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:47:13.046 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:13.046 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.8940ms
2023-01-31 02:47:13.048 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:47:13.048 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:13.048 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:13.048 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:47:13.048 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:47:13.050 +05:30 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:47:13.050 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:47:13.053 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:47:13.055 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 6.9561ms
2023-01-31 02:47:13.055 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:13.055 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 7.8495ms
2023-01-31 02:47:18.042 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:47:18.043 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:18.043 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:18.043 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:47:18.044 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:47:18.045 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:47:18.045 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:47:18.048 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:47:18.050 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 6.2496ms
2023-01-31 02:47:18.050 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:18.050 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 8.3474ms
2023-01-31 02:47:23.044 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:47:23.044 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:23.045 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.5031ms
2023-01-31 02:47:23.046 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:47:23.047 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:23.047 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:23.047 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:47:23.048 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:47:23.049 +05:30 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:47:23.049 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:47:23.054 +05:30 [INF] Executed DbCommand (5ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:47:23.061 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 13.1048ms
2023-01-31 02:47:23.061 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:23.062 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 15.9155ms
2023-01-31 02:47:28.053 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:47:28.053 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:28.053 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.3511ms
2023-01-31 02:47:28.058 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:47:28.059 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:28.059 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:28.059 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:47:28.060 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:47:28.061 +05:30 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:47:28.061 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:47:28.065 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:47:28.066 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 6.9923ms
2023-01-31 02:47:28.066 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:28.067 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 8.2092ms
2023-01-31 02:47:33.043 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:47:33.044 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:33.044 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:33.044 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:47:33.044 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:47:33.045 +05:30 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:47:33.046 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:47:33.049 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:47:33.050 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 5.7019ms
2023-01-31 02:47:33.050 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:33.050 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 7.0273ms
2023-01-31 02:47:38.039 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:47:38.040 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:38.040 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.7938ms
2023-01-31 02:47:38.042 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:47:38.042 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:38.042 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:38.043 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:47:38.043 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:47:38.044 +05:30 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:47:38.044 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:47:38.047 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:47:38.048 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 5.4953ms
2023-01-31 02:47:38.048 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:38.048 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 6.5605ms
2023-01-31 02:47:39.008 +05:30 [INF] Request starting HTTP/2 POST https://localhost:44380/api/AirQ application/json 137
2023-01-31 02:47:39.008 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:39.008 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:39.008 +05:30 [INF] Route matched with {action = "Post", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Post(iiht_AirMonitoringSystemApi.Models.Sensor) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:47:39.010 +05:30 [INF] -----------**********Posting the sensors Data**********------------
2023-01-31 02:47:39.013 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[@p0='?' (DbType = Double), @p1='?' (DbType = Double), @p2='?' (DbType = Double), @p3='?' (DbType = Int32), @p4='?' (DbType = Double), @p5='?' (DbType = Double), @p6='?' (DbType = DateTime2)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
INSERT INTO [Sensors] ([Co], [Co2], [Dust_Parcticle], [Mapped_Floor], [No2], [So2], [date])
OUTPUT INSERTED.[Id]
VALUES (@p0, @p1, @p2, @p3, @p4, @p5, @p6);
2023-01-31 02:47:39.014 +05:30 [INF] Executing StatusCodeResult, setting HTTP status code 201
2023-01-31 02:47:39.014 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi) in 5.6761ms
2023-01-31 02:47:39.014 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Post (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:39.015 +05:30 [INF] Request finished HTTP/2 POST https://localhost:44380/api/AirQ application/json 137 - 201 - - 6.7356ms
2023-01-31 02:47:43.042 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:47:43.042 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:43.042 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:43.042 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:47:43.042 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:47:43.044 +05:30 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:47:43.044 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:47:43.045 +05:30 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2023-01-31 02:47:43.045 +05:30 [WRN] The query uses a row limiting operator ('Skip'/'Take') without an 'OrderBy' operator. This may lead to unpredictable results. If the 'Distinct' operator is used after 'OrderBy', then make sure to use the 'OrderBy' operator after 'Distinct' as the ordering would otherwise get erased.
2023-01-31 02:47:43.051 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_0 ROWS ONLY
2023-01-31 02:47:43.052 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 9.6504ms
2023-01-31 02:47:43.052 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:43.052 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 10.5764ms
2023-01-31 02:47:48.046 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:47:48.046 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:48.047 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.7489ms
2023-01-31 02:47:48.048 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:47:48.048 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:48.048 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:48.049 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:47:48.049 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:47:48.050 +05:30 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:47:48.050 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:47:48.052 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_0 ROWS ONLY
2023-01-31 02:47:48.054 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 5.4824ms
2023-01-31 02:47:48.054 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:48.054 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 6.3856ms
2023-01-31 02:47:53.043 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:47:53.043 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:53.044 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:53.044 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:47:53.044 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:47:53.046 +05:30 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:47:53.046 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:47:53.049 +05:30 [INF] Executed DbCommand (3ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_0 ROWS ONLY
2023-01-31 02:47:53.050 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 5.7271ms
2023-01-31 02:47:53.050 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:53.050 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 7.1069ms
2023-01-31 02:47:54.219 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ/4 - -
2023-01-31 02:47:54.219 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:54.223 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get(Int64) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:47:54.226 +05:30 [INF] -----------**********Get sensors Data by Id**********------------
2023-01-31 02:47:54.274 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int64)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
WHERE [s].[Id] = @__p_0
2023-01-31 02:47:54.275 +05:30 [INF] Executing OkObjectResult, writing value of type 'iiht_AirMonitoringSystemApi.Models.Sensor'.
2023-01-31 02:47:54.275 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 51.5428ms
2023-01-31 02:47:54.275 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:54.275 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ/4 - - - 200 - application/json;+charset=utf-8 56.5497ms
2023-01-31 02:47:58.036 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:47:58.036 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:58.037 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.5823ms
2023-01-31 02:47:58.038 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:47:58.038 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:47:58.039 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:58.039 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:47:58.039 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:47:58.041 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:47:58.042 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:47:58.044 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_0 ROWS ONLY
2023-01-31 02:47:58.047 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 8.3855ms
2023-01-31 02:47:58.047 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:47:58.047 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 9.4557ms
2023-01-31 02:48:03.055 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:48:03.055 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:48:03.055 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.4226ms
2023-01-31 02:48:03.057 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:48:03.057 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:48:03.058 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:48:03.058 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:48:03.058 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:48:03.059 +05:30 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:48:03.060 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:48:03.063 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_0 ROWS ONLY
2023-01-31 02:48:03.065 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 7.0575ms
2023-01-31 02:48:03.065 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:48:03.065 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 8.1208ms
2023-01-31 02:48:03.878 +05:30 [INF] Request starting HTTP/2 DELETE https://localhost:44380/api/AirQ/15 - -
2023-01-31 02:48:03.878 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:48:03.879 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Delete (iiht_AirMonitoringSystemApi)'
2023-01-31 02:48:03.880 +05:30 [INF] Route matched with {action = "Delete", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Delete(Int64) on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:48:03.881 +05:30 [INF] -----------**********Deleting the sensors Data**********------------
2023-01-31 02:48:03.884 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int64)], CommandType='"Text"', CommandTimeout='30']
SELECT TOP(1) [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
WHERE [s].[Id] = @__p_0
2023-01-31 02:48:03.913 +05:30 [INF] Executed DbCommand (17ms) [Parameters=[@p0='?' (DbType = Int64)], CommandType='"Text"', CommandTimeout='30']
SET IMPLICIT_TRANSACTIONS OFF;
SET NOCOUNT ON;
DELETE FROM [Sensors]
OUTPUT 1
WHERE [Id] = @p0;
2023-01-31 02:48:03.920 +05:30 [INF] Executing OkObjectResult, writing value of type 'System.String'.
2023-01-31 02:48:03.921 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Delete (iiht_AirMonitoringSystemApi) in 40.8442ms
2023-01-31 02:48:03.921 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Delete (iiht_AirMonitoringSystemApi)'
2023-01-31 02:48:03.921 +05:30 [INF] Request finished HTTP/2 DELETE https://localhost:44380/api/AirQ/15 - - - 200 - text/plain;+charset=utf-8 43.2534ms
2023-01-31 02:48:08.042 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:48:08.042 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:48:08.043 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:48:08.043 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:48:08.043 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:48:08.044 +05:30 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:48:08.045 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:48:08.047 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:48:08.049 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 5.9452ms
2023-01-31 02:48:08.049 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:48:08.049 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 7.3876ms
2023-01-31 02:48:13.037 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:48:13.038 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:48:13.038 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.5041ms
2023-01-31 02:48:13.039 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:48:13.039 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:48:13.040 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:48:13.040 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:48:13.040 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:48:13.041 +05:30 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:48:13.041 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:48:13.044 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:48:13.045 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 5.0745ms
2023-01-31 02:48:13.045 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:48:13.045 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 5.9308ms
2023-01-31 02:48:18.039 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:48:18.039 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:48:18.040 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:48:18.040 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:48:18.040 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:48:18.041 +05:30 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:48:18.041 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:48:18.044 +05:30 [INF] Executed DbCommand (2ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:48:18.045 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 5.3231ms
2023-01-31 02:48:18.045 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:48:18.046 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 6.9334ms
2023-01-31 02:48:23.038 +05:30 [INF] Request starting HTTP/2 OPTIONS https://localhost:44380/api/AirQ - -
2023-01-31 02:48:23.038 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:48:23.038 +05:30 [INF] Request finished HTTP/2 OPTIONS https://localhost:44380/api/AirQ - - - 204 - - 0.4235ms
2023-01-31 02:48:23.040 +05:30 [INF] Request starting HTTP/2 GET https://localhost:44380/api/AirQ - -
2023-01-31 02:48:23.040 +05:30 [INF] CORS policy execution successful.
2023-01-31 02:48:23.040 +05:30 [INF] Executing endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:48:23.041 +05:30 [INF] Route matched with {action = "Get", controller = "AirQ"}. Executing controller action with signature Microsoft.AspNetCore.Mvc.IActionResult Get() on controller iiht_AirMonitoringSystemApi.Controllers.AirQController (iiht_AirMonitoringSystemApi).
2023-01-31 02:48:23.041 +05:30 [INF] ---------*********Get All SensorsData*********-----------
2023-01-31 02:48:23.042 +05:30 [INF] Executed DbCommand (0ms) [Parameters=[], CommandType='"Text"', CommandTimeout='30']
SELECT COUNT(*)
FROM [Sensors] AS [s]
2023-01-31 02:48:23.042 +05:30 [INF] Executing OkObjectResult, writing value of type 'Microsoft.EntityFrameworkCore.Query.Internal.EntityQueryable`1[[iiht_AirMonitoringSystemApi.Models.Sensor, iiht_AirMonitoringSystemApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]]'.
2023-01-31 02:48:23.043 +05:30 [INF] Executed DbCommand (1ms) [Parameters=[@__p_0='?' (DbType = Int32), @__p_1='?' (DbType = Int32)], CommandType='"Text"', CommandTimeout='30']
SELECT [s].[Id], [s].[Co], [s].[Co2], [s].[Dust_Parcticle], [s].[Mapped_Floor], [s].[No2], [s].[So2], [s].[date]
FROM [Sensors] AS [s]
ORDER BY (SELECT 1)
OFFSET @__p_0 ROWS FETCH NEXT @__p_1 ROWS ONLY
2023-01-31 02:48:23.046 +05:30 [INF] Executed action iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi) in 5.4633ms
2023-01-31 02:48:23.046 +05:30 [INF] Executed endpoint 'iiht_AirMonitoringSystemApi.Controllers.AirQController.Get (iiht_AirMonitoringSystemApi)'
2023-01-31 02:48:23.046 +05:30 [INF] Request finished HTTP/2 GET https://localhost:44380/api/AirQ - - - 200 - application/json;+charset=utf-8 6.2535ms
